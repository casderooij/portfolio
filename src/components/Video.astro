---
interface Props {
  src: string
}

const { src } = Astro.props
---

<video
  muted
  playsinline
  loop
  preload="none"
  data-src={src}
  class="h-full w-full object-contain"></video>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const videoElements = document.querySelectorAll('video')

    const playabilityObserver = new IntersectionObserver(
      (entries) => {
        for (const entry of entries) {
          const video = entry.target as HTMLVideoElement
          const stackItem: HTMLElement | null = video.closest('.stack-item')
          const isTopInStack = !stackItem || stackItem.dataset.index === '0'

          if (entry.isIntersecting && isTopInStack) {
            video.play()
          } else {
            video.pause()
          }
        }
      },
      { threshold: 0.5 },
    )

    const lazyObserver = new IntersectionObserver((entries, self) => {
      for (const entry of entries) {
        if (entry.isIntersecting) {
          const video = entry.target as HTMLVideoElement
          video.src = video.dataset.src!
          video.load()
          playabilityObserver.observe(video)
          self.unobserve(video)
        }
      }
    })

    videoElements.forEach((videoElement) => {
      if (videoElement) {
        lazyObserver.observe(videoElement)
        const stackItem: HTMLElement | null =
          videoElement.closest('.stack-item')
        if (stackItem) {
          const mutationObserver = new MutationObserver((mutations) => {
            for (const mutation of mutations) {
              if (
                mutation.type === 'attributes' &&
                mutation.attributeName === 'data-index'
              ) {
                const isTopInStack = stackItem.dataset.index === '0'
                // Check if the video is currently visible before playing
                const isIntersecting =
                  videoElement.getBoundingClientRect().top <
                    window.innerHeight &&
                  videoElement.getBoundingClientRect().bottom > 0
                if (isTopInStack && isIntersecting) {
                  videoElement.play()
                } else {
                  videoElement.pause()
                }
              }
            }
          })

          mutationObserver.observe(stackItem, { attributes: true })
        }
      }
    })
  })
</script>
